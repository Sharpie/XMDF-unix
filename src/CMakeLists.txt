# CMake control file for building the XMDF library
# Copyright (C) 2012 Charlie Sharpsteen
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This portion defines the steps required to build and link libxmdf.a as well
# as the target installation directory for the resulting library and header
# files.

# Define source files that are to be compiled into the library.
SET( XMDF_SRC_FILES
  Xmdf.c
  Xmdf_f.c
  xmdf_private.c
  xmdf_timestep.c
)


# Set up definitions that affect source code compilation and add include
# directories so header files can be located.
INCLUDE_DIRECTORIES( ${XMDF_SOURCE_DIR} ${HDF5_INCLUDE_DIR} )

# This is disabled because the XMDF_API is a preprocessor macro that defines
# DLL visibility for library functions. Setting DLL attributes on UNIX causes
# errors.
ADD_DEFINITIONS( -DNO_XMDF_API )

# This is required because XMDF uses the interface defined by HDF5 version 1.6
ADD_DEFINITIONS( -DH5_USE_16_API ${HDF5_DEFINITIONS} )

# Ifort requires lower case symbol names in order to cross-link.
IF("${CMAKE_Fortran_COMPILER_ID}" MATCHES "Intel")
  ADD_DEFINITIONS( -DFLOWER )
ENDIF()


# Specifies XMDF is to be built as a static library, i.e. libxmdf.a, and that it
# will contain the compiled contents of the files listed in the XMDF_SRC_FILES
# variable.
ADD_LIBRARY( xmdf STATIC ${XMDF_SRC_FILES} )


# Specify install location for the libraries which will be
# prefix/library/install/location.  In this case the location for libraries is
# specified to be:
#
#     prefix/lib
INSTALL(
  TARGETS xmdf
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
)


# Now, we locate include files
FILE( GLOB XMDF_C_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/*.h" )

# Fortran module files are tricky--- they are generated by the Fortran compiler
# when it processes the .f90 files.  Therefore they are not available when CMake
# configures the project.  It would be nice to have a way to automagically
# gather all install files, but here I am going to list them explicitly and
# assume they will always end in .mod.  Could be a brittle solution that may
# break outside of UNIX/gfortran.
SET( XMDF_F90_HEADERS
  ${CMAKE_CURRENT_BINARY_DIR}/xmdf.mod
  ${CMAKE_CURRENT_BINARY_DIR}/xmdfdefs.mod
  ${CMAKE_CURRENT_BINARY_DIR}/errordefinitions.mod
)

# Install include files to prefix/include
INSTALL(
  FILES ${XMDF_C_HEADERS} #${XMDF_F90_HEADERS}
  DESTINATION include
)
